{"version":3,"sources":["component/header.js","component/todo.js","component/todoHome.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Todo","useState","task","time","date","Date","id","todo","setTodo","todoList","setTodoList","handleChange","e","target","name","value","now","deleteItem","newTodoList","map","Grid","container","item","xs","sm","style","margin","TextField","label","placeholder","onChange","error","disabled","fullWidth","type","newTime","hour","getHours","min","getMinutes","sec","getSeconds","day_night","currentTime","Button","onClick","preventDefault","newTodo","console","log","todoItem","TodoHome","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76b43021.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, makeStyles, Typography, IconButton } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function Header() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            TODO \r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React, {useState} from 'react'\r\nimport './todo.css'\r\nimport {Grid, TextField,IconButton, Button} from '@material-ui/core/';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nfunction Todo() {\r\n    // let {showtime} = props.ShowTime;\r\n    const [todo, setTodo] = useState({\r\n        task: '',\r\n        time: \"00:00\",\r\n        date: new Date(),\r\n        id:''\r\n    });\r\n    const [todoList, setTodoList] = useState([])\r\n\r\n    const handleChange= (e) => {\r\n        const {name, value} = e.target;\r\n        setTodo({...todo, [name]: value, id: Date.now()})\r\n    }\r\n    const handleSave = (e) => {\r\n        e.preventDefault();\r\n        if(todo.task && todo.date && todo.time) {\r\n            const newTodo = {...todo, todo};\r\n            setTodoList([...todoList, newTodo]);\r\n            console.log(todoList);\r\n            setTodo({\r\n                task:'',\r\n                time: \"00:00\",\r\n                date: new Date(),\r\n                id: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    const deleteItem = (id) =>{\r\n        const newTodoList= todoList.map(todo =>\r\n          todo.id !== id);\r\n        setTodoList([newTodoList]);  \r\n        setTodo({\r\n            task:'',\r\n            time: \"00:00\",\r\n            date: new Date(),\r\n            id: ''\r\n        });  \r\n      }\r\n\r\n    const ShowTime = () => {\r\n        let newTime = new Date();\r\n        let hour = newTime.getHours();\r\n        let min = newTime.getMinutes();\r\n        let sec = newTime.getSeconds();\r\n        let day_night = \"AM\";\r\n        if(hour > 12) {\r\n            hour = hour - 12;\r\n            day_night = \"PM\";\r\n        }\r\n        if(hour == 0){\r\n            hour = 12;\r\n            day_night =\"AM\";\r\n        }\r\n        \r\n        hour = hour < 10 ? \"0\" + hour : hour; \r\n        min = min < 10 ? \"0\" + min : min; \r\n        sec = sec < 10 ? \"0\" + sec : sec; \r\n        \r\n        let currentTime = hour + \":\" + min + \" \" +day_night; \r\n    \r\n        // return currentTime;\r\n        setTodo({...todo, time: currentTime}) \r\n    }\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <Grid container spacing={1}>\r\n                <Grid item xs=\"6\" sm=\"3\" style={{margin:'15px'}}>\r\n                <TextField\r\n                id=\"task\"\r\n                name=\"task\"\r\n                label='Enter Task'\r\n                value={todo.task}\r\n                color=\"primary\"\r\n                placeholder=\"Enter Task\"\r\n                onChange={handleChange}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                error={false}\r\n                disabled= {false}\r\n                fullWidth={true}\r\n                />\r\n                </Grid>\r\n                <Grid item xs=\"6\" sm=\"3\" style={{margin:'15px'}}>\r\n                <form>                    \r\n                    <input type=\"date\"\r\n                    id=\"date\"\r\n                    name=\"date\"\r\n                    value={todo.date}\r\n                    onChange={handleChange}\r\n                    />                    \r\n                </form>\r\n                </Grid> \r\n                <Grid item xs=\"6\" sm=\"3\" style={{margin:'15px'}}>\r\n                    <form>\r\n                        \r\n                    <input\r\n                    name=\"time\" value={todo.time}\r\n                    onChange={ShowTime}\r\n                    />\r\n                    </form>\r\n                </Grid>                \r\n                <Grid item xs=\"6\" sm=\"3\" style={{margin:'15px'}}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>Save</Button>\r\n                </Grid>\r\n            </Grid>\r\n                {\r\n                    todoList.map((todoItem) => {\r\n                        const {id, task, time, date} = todoItem;\r\n                        return(\r\n                            <div key={id} className=\"tasks\">\r\n                                <h1>\r\n                                    {task}\r\n                                </h1>\r\n                                <h3>{date}</h3>\r\n                                <h3>{time}</h3>                       \r\n                                <IconButton aria-label=\"delete\" color=\"secondary\"\r\n                                onClick={deleteItem}\r\n                                >\r\n                                <DeleteIcon />\r\n                                </IconButton>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\nimport Header from './header.js'\r\nimport Todo from './todo'\r\n// import './todo.css';\r\n\r\nfunction TodoHome() {\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <Todo />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoHome","import TodoHome from './component/todoHome'\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Router>\n       <Route path='/' exact>\n         <TodoHome />\n       </Route>\n     </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
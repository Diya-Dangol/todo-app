[{"C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\index.js":"1","C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\App.js":"2","C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\reportWebVitals.js":"3","C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\component\\todo.js":"4","C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\component\\header.js":"5","C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\component\\todoHome.js":"6","C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\component\\showTime.js":"7"},{"size":457,"mtime":1609141462710,"results":"8","hashOfConfig":"9"},{"size":320,"mtime":1608974968661,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":4498,"mtime":1609248829061,"results":"12","hashOfConfig":"9"},{"size":838,"mtime":1608975158316,"results":"13","hashOfConfig":"9"},{"size":264,"mtime":1609152806104,"results":"14","hashOfConfig":"9"},{"size":652,"mtime":1609242547347,"results":"15","hashOfConfig":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"exrs1x",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"14nse9","C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\index.js",[],["33","34"],"C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\App.js",[],"C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\reportWebVitals.js",[],"C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\component\\todo.js",["35","36"],"import React, {useState} from 'react'\r\nimport './todo.css'\r\nimport {Grid, TextField,IconButton, Button} from '@material-ui/core/';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nfunction Todo() {\r\n    // let {showtime} = props.ShowTime;\r\n    const [todo, setTodo] = useState({\r\n        task: '',\r\n        time: \"00:00\",\r\n        date: new Date(),\r\n        id:''\r\n    });\r\n    const [todoList, setTodoList] = useState([])\r\n\r\n    const handleChange= (e) => {\r\n        const {name, value} = e.target;\r\n        setTodo({...todo, [name]: value, id: Date.now()})\r\n    }\r\n    const handleSave = (e) => {\r\n        e.preventDefault();\r\n        if(todo.task && todo.date && todo.time) {\r\n            const newTodo = {...todo, todo};\r\n            setTodoList([...todoList, newTodo]);\r\n            console.log(todoList);\r\n            setTodo({\r\n                task:'',\r\n                time: \"00:00\",\r\n                date: new Date(),\r\n                id: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    const deleteItem = (id) =>{\r\n        const newTodoList= todoList.map(todo =>\r\n          todo.id !== id);\r\n        setTodoList([newTodoList]);  \r\n        setTodo({\r\n            task:'',\r\n            time: \"00:00\",\r\n            date: new Date(),\r\n            id: ''\r\n        });  \r\n      }\r\n\r\n    const ShowTime = () => {\r\n        let newTime = new Date();\r\n        let hour = newTime.getHours();\r\n        let min = newTime.getMinutes();\r\n        let sec = newTime.getSeconds();\r\n        let day_night = \"AM\";\r\n        if(hour > 12) {\r\n            hour = hour - 12;\r\n            day_night = \"PM\";\r\n        }\r\n        if(hour == 0){\r\n            hour = 12;\r\n            day_night =\"AM\";\r\n        }\r\n        \r\n        hour = hour < 10 ? \"0\" + hour : hour; \r\n        min = min < 10 ? \"0\" + min : min; \r\n        sec = sec < 10 ? \"0\" + sec : sec; \r\n        \r\n        let currentTime = hour + \":\" + min + \" \" +day_night; \r\n    \r\n        // return currentTime;\r\n        setTodo({...todo, time: currentTime}) \r\n    }\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <Grid container spacing={1}>\r\n                <Grid item xs=\"6\" sm=\"3\" style={{margin:'15px'}}>\r\n                <TextField\r\n                id=\"task\"\r\n                name=\"task\"\r\n                label='Enter Task'\r\n                value={todo.task}\r\n                color=\"primary\"\r\n                placeholder=\"Enter Task\"\r\n                onChange={handleChange}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                error={false}\r\n                disabled= {false}\r\n                fullWidth={true}\r\n                />\r\n                </Grid>\r\n                <Grid item xs=\"6\" sm=\"3\" style={{margin:'15px'}}>\r\n                <form>                    \r\n                    <input type=\"date\"\r\n                    id=\"date\"\r\n                    name=\"date\"\r\n                    value={todo.date}\r\n                    onChange={handleChange}\r\n                    />                    \r\n                </form>\r\n                </Grid> \r\n                <Grid item xs=\"6\" sm=\"3\" style={{margin:'15px'}}>\r\n                    <form>\r\n                        \r\n                    <input\r\n                    name=\"time\" value={todo.time}\r\n                    onChange={ShowTime}\r\n                    />\r\n                    </form>\r\n                </Grid>                \r\n                <Grid item xs=\"6\" sm=\"3\" style={{margin:'15px'}}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>Save</Button>\r\n                </Grid>\r\n            </Grid>\r\n                {\r\n                    todoList.map((todoItem) => {\r\n                        const {id, task, time, date} = todoItem;\r\n                        return(\r\n                            <div key={id} className=\"tasks\">\r\n                                <h1>\r\n                                    {task}\r\n                                </h1>\r\n                                <h3>{date}</h3>\r\n                                <h3>{time}</h3>                       \r\n                                <IconButton aria-label=\"delete\" color=\"secondary\"\r\n                                onClick={deleteItem}\r\n                                >\r\n                                <DeleteIcon />\r\n                                </IconButton>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\component\\header.js",[],"C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\component\\todoHome.js",[],"C:\\Users\\diya\\Desktop\\diya\\react_class\\todo-app\\src\\component\\showTime.js",["37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":57,"column":17,"nodeType":"45","messageId":"46","endLine":57,"endColumn":19},{"ruleId":"47","severity":1,"message":"48","line":64,"column":38,"nodeType":"49","messageId":"50","endLine":64,"endColumn":41},{"ruleId":"43","severity":1,"message":"44","line":11,"column":13,"nodeType":"45","messageId":"46","endLine":11,"endColumn":15},{"ruleId":"47","severity":1,"message":"48","line":18,"column":34,"nodeType":"49","messageId":"50","endLine":18,"endColumn":37},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'sec' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]